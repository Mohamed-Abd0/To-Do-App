{"version":3,"sources":["components/bord/InputForm/InputForm.module.css","components/UI/Button.module.css","components/UI/Button.js","components/bord/InputForm/InputForm.js","components/bord/Item/Item.js","components/bord/Taskslist/TaskList.js","App.js","index.js"],"names":["module","exports","Button","props","type","className","styles","button","onClick","children","Inputform","prop","useState","EnteredValue","setEnteredValue","valid","setValid","onSubmit","e","preventDefault","trim","length","onAddTask","clases","invalid","value","onChange","event","target","Item","text","id","ondeletItem","TaskList","items","map","obj","App","Datalist","setDatalist","content","style","textAlign","itemId","prevstat","filter","toString","InputForm","updatedTasks","unshift","Math","floor","random","ReactDOM","createRoot","document","getElementById","render"],"mappings":"wHACAA,EAAOC,QAAU,CAAC,eAAe,gCAAgC,QAAU,6B,kBCA3ED,EAAOC,QAAU,CAAC,OAAS,yB,sNCsCZC,EARA,SAAAC,GACb,OACE,wBAAQC,KAAMD,EAAMC,KAAMC,UAAWC,IAAOC,OAAQC,QAASL,EAAMK,QAAnE,SACGL,EAAMM,YCSEC,EAtCG,SAACC,GAEf,MAAyCC,mBAAS,IAAlD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA2BF,oBAAS,GAApC,mBAAOG,EAAP,KAAeC,EAAf,KAwBA,OACA,uBAAMC,SAjBoB,SAACC,GAEvBA,EAAEC,iBACgC,IAA/BN,EAAaO,OAAOC,OACnBL,GAAS,IAETA,GAAS,GAGTL,EAAKW,UAAUT,GAGfC,EAAgB,MAKxB,UACI,sBACAT,UAAS,UAAKkB,IAAO,gBAAZ,aAAuC,IAARR,GAAiBQ,IAAOC,SADhE,UAEI,gDACA,uBAAOpB,KAAK,OAAOqB,MAAOZ,EAAca,SA1BtB,SAACC,GACvBb,EAAgBa,EAAMC,OAAOH,aA2B7B,cAAC,EAAD,CAAQrB,KAAK,SAAb,0BCjBOyB,G,MAjBF,SAAC1B,GAMV,OACI,qBAAIE,UAAU,OAAd,UACI,8BAAMF,EAAM2B,OACZ,sBAAKzB,UAAU,QAAf,UACI,sBAAM0B,GAAI5B,EAAM4B,GAAIvB,QARX,SAACmB,GAClBxB,EAAM6B,YAAYL,EAAMC,OAAOG,KAOvB,mBACA,+BAAM,uBAAO3B,KAAK,uBCDnB6B,G,MAXE,SAAC9B,GAGd,OACI,oBAAIE,UAAU,YAAd,SACKF,EAAM+B,MAAMC,KAAI,SAAAC,GAAG,OAAI,cAAC,EAAD,CAAON,KAAMM,EAAIN,KAAmBC,GAAIK,EAAIL,GAAIC,YAAa7B,EAAM6B,aAAvCI,EAAIL,WCwCrDM,EAzCH,WAGV,MAAgCzB,mBAAS,IAAzC,mBAAO0B,EAAP,KAAkBC,EAAlB,KAkBIC,EAAU,mBAAGC,MAAO,CAACC,UAAY,UAAvB,kCAMd,OALGJ,EAASjB,OAAO,IACjBmB,EAAU,cAAC,EAAD,CAAUN,MAAOI,EAAUN,YATd,SAACW,GACxBJ,GAAY,SAAAK,GAEV,OADqBA,EAASC,QAAO,SAAAT,GAAG,OAAIA,EAAIL,GAAGe,aAAcH,YAYnE,gCACE,yBAASZ,GAAG,YAAZ,SACE,cAACgB,EAAD,CAAWzB,UAxBM,SAACT,GACtB0B,GAAY,SAAAK,GACV,IAAMI,EAAY,YAAOJ,GAEzB,OADAI,EAAaC,QAAQ,CAAEnB,KAAKjB,EAAckB,GAAImB,KAAKC,OAAqB,IAAdD,KAAKE,UAAgBN,cACxEE,UAwBP,yBAASjB,GAAG,QAAZ,SACCS,QCrCMa,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAAO,cAAC,EAAD,O","file":"static/js/main.4ce60fc8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form-control\":\"InputForm_form-control__x7RAx\",\"invalid\":\"InputForm_invalid__1348C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__6-R6B\"};","import React from 'react';\r\n\r\nimport styles from './Button.module.css';\r\n// import styled from 'styled-components';\r\n\r\n// const Button = styled.button`\r\n//   width: 100%;\r\n//   font: inherit;\r\n//   padding: 0.5rem 1.5rem;\r\n//   border: 1px solid #8b005d;\r\n//   color: white;\r\n//   background: #8b005d;\r\n//   box-shadow: 0 0 4px rgba(0, 0, 0, 0.26);\r\n//   cursor: pointer;\r\n\r\n//   @media (min-width: 768px) {\r\n//     width: auto;\r\n//   }\r\n\r\n//   &:focus {\r\n//     outline: none;\r\n//   }\r\n\r\n//   &:hover,\r\n//   &:active {\r\n//     background: #ac0e77;\r\n//     border-color: #ac0e77;\r\n//     box-shadow: 0 0 8px rgba(0, 0, 0, 0.26);\r\n//   }\r\n// `;\r\n\r\nconst Button = props => {\r\n  return (\r\n    <button type={props.type} className={styles.button} onClick={props.onClick}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","\r\nimport clases from './InputForm.module.css' ;\r\nimport Button from '../../UI/Button';\r\nimport { useState } from 'react';\r\n\r\nconst Inputform = (prop)=>{\r\n\r\n    const [EnteredValue , setEnteredValue] = useState('') ;\r\n    const [valid , setValid] = useState(true);\r\n\r\n    // set the entered value on change input value\r\n    const TaskChangeHandler = (event)=>{\r\n        setEnteredValue(event.target.value);\r\n    };\r\n    \r\n    // handle the submition\r\n    const formSubmitHandler = (e)=>{\r\n        //check the validation\r\n        e.preventDefault();\r\n        if(EnteredValue.trim().length === 0){\r\n            setValid(false);\r\n        }else{\r\n            setValid(true);\r\n\r\n            // pass the data up to the App\r\n            prop.onAddTask(EnteredValue)\r\n            \r\n            // reset the input feild \r\n            setEnteredValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n    <form onSubmit={formSubmitHandler}>\r\n        <div\r\n        className={`${clases['form-control']} ${valid===false && clases.invalid}`}>\r\n            <label>Course Goal</label>\r\n            <input type=\"text\" value={EnteredValue} onChange={TaskChangeHandler} />\r\n        </div>\r\n        <Button type=\"submit\">Add Goal</Button>\r\n    </form>\r\n    )\r\n}\r\nexport default Inputform","\r\n\r\nimport './Item.css';\r\n\r\n\r\nconst Item = (props)=>{\r\n\r\n    const deletHandler = (event)=>{\r\n        props.ondeletItem(event.target.id);\r\n    }\r\n\r\n    return (\r\n        <li className='item'>\r\n            <div>{props.text}</div>\r\n            <div className='icons'>\r\n                <span id={props.id} onClick={deletHandler}>delet</span>\r\n                <span><input type='checkbox'></input></span>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Item","\r\nimport Item from '../Item/Item';\r\nimport './TaskList.css' ;\r\n\r\nconst TaskList = (props)=>{\r\n\r\n\r\n    return (\r\n        <ul className='task-list'>\r\n            {props.items.map(obj => <Item  text={obj.text} key={obj.id} id={obj.id} ondeletItem={props.ondeletItem}></Item>)}\r\n        </ul>\r\n    )\r\n\r\n}\r\n\r\nexport default TaskList","\r\nimport { useState } from 'react';\r\nimport './App.css';\r\nimport InputForm from './components/bord/InputForm/InputForm';\r\nimport TaskList from './components/bord/Taskslist/TaskList';\r\n\r\n\r\n\r\nconst App = ()=>{\r\n\r\n\r\n  const [Datalist , setDatalist] =useState([]);\r\n\r\n\r\n  const AddTaskHandler = (EnteredValue)=>{\r\n    setDatalist(prevstat => {\r\n      const updatedTasks = [...prevstat];\r\n      updatedTasks.unshift({ text:EnteredValue, id: Math.floor((Math.random()*10000).toString()) });\r\n      return updatedTasks;\r\n    });\r\n  }\r\n\r\n  const deletItemHandler = (itemId)=>{\r\n    setDatalist(prevstat =>{\r\n      const updatedTasks = prevstat.filter(obj => obj.id.toString() !==itemId)\r\n      return updatedTasks;\r\n    })\r\n  }\r\n\r\n  let content = <p style={{textAlign : 'center'}}>Enter the first task</p> ;\r\n  if(Datalist.length>0){\r\n    content = <TaskList items={Datalist} ondeletItem={deletItemHandler}></TaskList>\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <section id=\"goal-form\">\r\n        <InputForm onAddTask={AddTaskHandler}></InputForm>\r\n      </section>\r\n\r\n\r\n      <section id=\"goals\">\r\n      {content}\r\n      </section>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(<App />);\r\n"],"sourceRoot":""}